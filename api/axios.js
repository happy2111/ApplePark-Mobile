import axios from "axios";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { Platform } from "react-native";

const getBaseURL = () => {
  if (Platform.OS === "android") {
    // –î–ª—è Android —ç–º—É–ª—è—Ç–æ—Ä–∞ localhost = 10.0.2.2
    return "http://10.0.2.2:5000/api";
  }

  if (Platform.OS === "ios") {
    // iOS —Å–∏–º—É–ª—è—Ç–æ—Ä –ø–æ–Ω–∏–º–∞–µ—Ç localhost
    return "http://localhost:5000/api";
  }

  // –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ‚Äî —Ç–≤–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π IP
  return "http://192.168.1.148:5000/api";
};

const api = axios.create({
  baseURL: "http://172.20.10.3:5000/api",
  withCredentials: true, // üîë –≤–∞–∂–Ω–æ! —á—Ç–æ–±—ã refreshToken –ø–æ –∫—É–∫–∏ —Ö–æ–¥–∏–ª
  headers: {
    "Content-Type": "application/json",
  },
});

// üü¢ –î–æ–±–∞–≤–ª—è–µ–º accessToken –≤ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
api.interceptors.request.use(
  async (config) => {
    const token = await AsyncStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

// üü° –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º 401 –∏ –æ–±–Ω–æ–≤–ª—è–µ–º accessToken –ø–æ refreshToken (–∏–∑ cookie)
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        // –∑–∞–ø—Ä–æ—Å–∏–º –Ω–æ–≤—ã–π accessToken –ø–æ refreshToken (–∫—É–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è)
        const { data } = await api.get("/auth/refresh");

        // —Å–æ—Ö—Ä–∞–Ω–∏–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        await AsyncStorage.setItem("token", data.token);

        // –ø–æ–¥—Å—Ç–∞–≤–∏–º –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–∏–º –∑–∞–ø—Ä–æ—Å
        originalRequest.headers["Authorization"] = `Bearer ${data.token}`;
        return api(originalRequest);
      } catch (refreshError) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", refreshError);
        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  }
);

export default api;
